{
	"$schema": "http://json-schema.org/draft-04/schema#",
	"description": "Schema for Novella Story.",

	// MARK: top-level
	"type": "object",
	"properties": {
		"variables": {
			"type": "array",
			"items": { "$ref": "#/definitions/variable" }
		},
		"folders": {
			"type": "array",
			"items": { "$ref": "#/definitions/folder" }
		},
		"graphs": {
			"type": "array",
			"items": { "$ref": "#/definitions/graph" }
		},
		"links": {
			"type": "array",
			"items": { "$ref": "#/definitions/link" }
		},
		"nodes": {
			"type": "array",
			"items": { "$ref": "#/definitions/node" }
		}
	},
	"required": ["variables", "folders", "graphs", "links", "nodes"],
	// END top-level

	// MARK: definitions
	"definitions": {
		// MARK: name
		"name": {
			"type": "string"
		},
		// END name

		// MARK: uuid
		"uuid": {
			"type": "string",
			// Conforms to RFC 4122 Version 4 (https://developer.apple.com/documentation/foundation/nsuuid and https://stackoverflow.com/a/38191078)
			"pattern": "[0-9A-F]{8}-[0-9A-F]{4}-[4][0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}"
		},
		// END uuid

		// MARK: value
		"value": {
			"anyOf": [
				{ "type": "integer" },
				{ "type": "boolean" },
				// technically handles integers, but is for floats
				{ "type": "number" }
			]
		},
		// END value

		// MARK: variable
		"variable": {
			"properties": {
				"name": { "$ref": "#/definitions/name" },
				"uuid": { "$ref": "#/definitions/uuid" },
				"synopsis": { "type": "string" },
				// This is mapped to DataType.stringValue; TODO: Can I auto-map this?
				"datatype": {
					"type": "string",
					"enum": ["boolean", "integer", "double"]
				},
				"constant": { "type": "boolean" },
				"value": { "$ref": "#/definitions/value" },
				"initialValue": { "$ref": "#/definitions/value" }
			},
			"required": ["name", "uuid", "synopsis", "datatype", "constant", "value", "initialValue"],
			// MARK: variable-dependencies
			"dependencies": {
				// validate initialValue/value type matches datatype
				"datatype": {
					"oneOf": [
						// integer
						{
							"properties": {
								"datatype": { "enum": ["integer"] },
								"value": { "type": "integer" },
								"initialValue": { "type": "integer" }
							}
						},
						// boolean
						{
							"properties": {
								"datatype": { "enum": ["boolean"] },
								"value": { "type": "boolean" },
								"initialValue": { "type": "boolean" }
							}
						},
						// double
						{
							"properties": {
								"datatype": { "enum": ["double"] },
								"value": { "type": "number" },
								"initialValue": { "type": "number"}
							}
						}
					]
				}
			}
			// END variable-dependencies
		},
		// END variable

		// MARK: folder
		"folder": {
			"properties": {
				"name": { "$ref": "#/definitions/name" },
				"uuid": { "$ref": "#/definitions/uuid" },
				"subfolders": {
					"type": "array",
					"items": { "$ref": "#/definitions/uuid" }
				},
				"variables": {
					"type": "array",
					"items": { "$ref": "#/definitions/uuid" }
				}
			},
			"required": ["name", "uuid", "subfolders", "variables"]
		},
		// END folder

		// MARK: graph
		"graph": {
			"properties": {
				"name": { "$ref": "#/definitions/name" },
				"uuid": { "$ref": "#/definitions/uuid" },
				"entry": { "$ref": "#/definitions/uuid" },
				"subgraphs": {
					"type": "array",
					"items": { "$ref": "#/definitions/uuid" }
				},
				"nodes": {
					"type": "array",
					"items": { "$ref": "#/definitions/uuid" }
				},
				"links": {
					"type": "array",
					"items": { "$ref": "#/definitions/uuid" }
				},
				"listeners": {
					"type": "array",
					"items": { "$ref": "#/definitions/uuid" }
				},
				"exits": {
					"type": "array",
					"items": { "$ref": "#/definitions/uuid" }
				}
			},
			"required": ["name", "uuid", "entry", "subgraphs", "nodes", "links", "listeners", "exits"]
		},
		// END graph

		// MARK: link
		"link": {
			"properties": {
				"uuid": { "$ref": "#/definitions/uuid" },
				// One for each concrete Link.
				"linktype": {
					"type": "string",
					"enum": ["link", "branch", "switch"]
				},
				"origin": { "$ref": "#/definitions/uuid" }
			},
			"required": ["uuid", "linktype", "origin"],
			// MARK: link-dependencies
			"dependencies": {
				// handle each concrete link's schema based on linktype
				"linktype": {
					"oneOf": [
						// link
						{
							"properties": {
								"linktype": { "enum": ["link"] },
								"transfer": { "$ref": "#/definitions/transfer" }
							},
							"required": ["transfer"]
						},
						// branch
						{
							"properties": {
								"linktype": { "enum": ["branch"] },
								"ttransfer": { "$ref": "#/definitions/transfer" },
								"ftransfer": { "$ref": "#/definitions/transfer" }
							},
							"required": ["ttransfer", "ftransfer"]
						}
					]
				}
			}
			// END link-dependencies
		},
		// END link

		// MARK: transfer
		"transfer": {
			"type": "object",
			"properties": {
				"destination": { "$ref": "#/definitions/uuid" }
			},
			"required": ["destination"]
		},
		// END transfer

		// MARK: node
		"node": {
			"type": "object",
			"properties": {
				"uuid": { "$ref": "#/definitions/uuid" },
				// one for each concrete type
				"nodetype": {
					"type": "string",
					"enum": ["dialog", "delivery", "cutscene", "context"]
				}
			},
			"required": ["uuid", "nodetype"],
			// MARK: node-dependencies
			"dependencies": {
				// handle each node type based on the nodetype
				"nodetype": {
					"oneOf": [
						// dialog
						{
							"properties": {
								"nodetype": { "enum": ["dialog"] },
								"content": { "type": "string" },
								"preview": { "type": "string" },
								"directions": { "type": "string" }
								// TODO: dialog properties
							},
							"required": ["content", "preview", "directions"]
						},
						// delivery
						{
							"properties": {
								"nodetype": { "enum": ["delivery"] }
								// TODO: delivery properties
							},
							"required": []
						},
						// cutscene
						{
							"properties": {
								"nodetype": { "enum": ["cutscene"] }
								// TODO: cutscene properties
							},
							"required": []
						},
						// context
						{
							"properties": {
								"nodetype": { "enum": ["context"] }
								// TODO: context properties
							},
							"required": []
						}
					]
				}
			}
			// END node-dependencies
		}
		// END node
	}
	// END definitions
}
